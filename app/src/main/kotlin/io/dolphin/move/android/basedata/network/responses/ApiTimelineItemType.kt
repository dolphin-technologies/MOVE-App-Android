/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package io.dolphin.move.android.basedata.network.responses


import com.google.gson.annotations.SerializedName

/**
 *
 *
 * Values: cYCLING,tRAM,mETRO,cAR,tRAIN,pUBLICTRANSPORT,bUS,uNKNOWN,iDLE,wALKING,fAKETRIP
 */

enum class ApiTimelineItemType(val value: kotlin.String) {

    @SerializedName(value = "CYCLING")
    cYCLING("CYCLING"),

    @SerializedName(value = "TRAM")
    tRAM("TRAM"),

    @SerializedName(value = "METRO")
    mETRO("METRO"),

    @SerializedName(value = "CAR")
    cAR("CAR"),

    @SerializedName(value = "TRAIN")
    tRAIN("TRAIN"),

    @SerializedName(value = "PUBLIC_TRANSPORT")
    pUBLICTRANSPORT("PUBLIC_TRANSPORT"),

    @SerializedName(value = "BUS")
    bUS("BUS"),

    @SerializedName(value = "UNKNOWN")
    uNKNOWN("UNKNOWN"),

    @SerializedName(value = "IDLE")
    iDLE("IDLE"),

    @SerializedName(value = "WALKING")
    wALKING("WALKING"),

    @SerializedName(value = "FAKETRIP")
    fAKETRIP("FAKETRIP");

    /**
     * Override toString() to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? =
            if (data is ApiTimelineItemType) "$data" else null

        /**
         * Returns a valid [ApiTimelineItemType] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): ApiTimelineItemType? = data?.let {
            val normalizedData = "$it".lowercase()
            values().firstOrNull { value ->
                it == value || normalizedData == "$value".lowercase()
            }
        }
    }
}

